What happens when you initialize a repository? Why do you need to do it?

A .git directory is created to store all the metadata needed to track the history of your files.

###

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area contains only the files from the working directory that we've chosen to add to it. It's also different from the repository, because it's not yet committed. It gives the user more choice (like not tracking all the files) and allows some more control over what we think is a logical change worth committing.

###

How can you use the staging area to make sure you have one commit per logical change?

Even if you make multiple changes, you can add files to the staging area and then commit them one by one to separate the logical steps.

###

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are useful if you want to test something new and you want to have a working version of your code to go back to if things don't work out.

###

How do the diagrams help you visualize the branch structure?

They literally visualize the structure.

###

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result is a single branch including all the changes from both branches. We represent it the way we do because the new branch has two parents. Also one of the branches ceases to exist.

###

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

It automates the boring and obvious stuff.